// aoc_jule  Copyright (C) 2024  Adam Perkowski
// https://github.com/adamperkowski/aoc_jule
// https://adventofcode.com/2024/day/2

use "std/conv"
use "std/math"
use "std/os"
use "std/strings"

fn isSafe(num: []int): bool {
	let mut initial = 0
	if num[0]-num[1] >= 0 {
		initial = 1
	}

	let mut diffs: []int

	for i, n in num {
		if i == len(num)-1 {
			break
		}

		diff := n - num[i+1]

		let mut sign = 0
		if diff >= 0 {
			sign = 1
		}

		if sign != initial {
			ret false
		}

		abs_diff := int(math::Abs(f64(diff)))
		if abs_diff < 1 || abs_diff > 3 {
			ret false
		}
		diffs = append(diffs, abs_diff)
	}

	ret len(diffs) == len(num)-1
}

fn countSafe(input: []byte, max_unsafe: int): int {
	lines := strings::SplitAll(str(input), "\n")

	let mut count: int = 0

	for _, line_b in lines {
		line := strings::SplitAll(str(line_b), " ")
		let mut num: []int
		for _, n in line {
			num = append(num, conv::Atoi(n)!)
		}

		if isSafe(num) {
			count++
		}
	}

	ret count
}

fn main() {
	println("2024/02")

	inputs := os::File.Read("inputs.txt")!

	safe := countSafe(inputs, 0)
	print("safe reports: ")
	println(safe)

	safe_1 := countSafe(inputs, 1)
	print("safe reports (max usafe level 1): ")
	println(safe_1)
}