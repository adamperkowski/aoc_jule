// aoc_jule  Copyright (C) 2024  Adam Perkowski
// https://github.com/adamperkowski/aoc_jule
// https://adventofcode.com/2024/day/2

use "std/conv"
use "std/math"
use "std/os"
use "std/strings"

fn isSafeNoDampener(num: []int): bool {
	if len(num) < 2 {
		ret true
	}

	let mut initial = 0
	if num[0]-num[1] >= 0 {
		initial = 1
	}

	for i, n in num {
		if i == len(num)-1 {
			break
		}

		diff := n - num[i+1]

		let mut sign = 0
		if diff >= 0 {
			sign = 1
		}

		if sign != initial {
			ret false
		}

		abs_diff := int(math::Abs(f64(diff)))
		if abs_diff < 1 || abs_diff > 3 {
			ret false
		}
	}

	ret true
}

fn isSafeDampener(num: []int): bool {
	if isSafeNoDampener(num) {
		ret true
	}

	for i, _ in num {
		let mut temp_num: []int

		for j, n in num {
			if i != j {
				temp_num = append(temp_num, n)
			}
		}

		if isSafeNoDampener(temp_num) {
			ret true
		}
	}

	ret false
}

fn countSafe(input: []byte, useDampener: bool): int {
	lines := strings::Split(str(input), "\n")

	let mut count: int = 0

	for _, line_b in lines {
		line := strings::Split(str(line_b), " ")
		let mut num: []int
		for _, n in line {
			num = append(num, conv::Atoi(n)!)
		}

		if useDampener {
			if isSafeDampener(num) {
				count++
			}
		} else {
			if isSafeNoDampener(num) {
				count++
			}
		}
	}

	ret count
}

fn main() {
	println("2024/02")

	inputs := os::File.Read("inputs.txt")!

	safe_part_one := countSafe(inputs, false)
	print("safe reports (part one): ")
	println(safe_part_one)

	safe_part_two := countSafe(inputs, true)
	print("safe reports (part two): ")
	println(safe_part_two)
}